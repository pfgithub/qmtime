const child_process = require("child_process");
const { promises: fs } = require("fs");
const path = require("path");

function exec(cmd) {
  return new Promise((r, re) => {
    child_process.exec(cmd, {}, (er, stdout) => {
      if (er) return re(er);
      r(stdout.toString("utf-8"));
    });
  });
}

(async () => {
  let res = [
    ...new Set([
      ...(await exec("pkg-config --cflags --libs gtk+-3.0")).split(" ")
      // ...(await exec("pkg-config --cflags --libs libxfce4panel-1.0")).split(" ")
      // ^ for some reason, that one causes a compile error
    ])
  ]
    .sort()
    .map(q => q.trim())
    .map(q => {
      if (!q) {
        return undefined;
      }
      let path = q.substr(2);
      if (q[1] === "I") {
        return `lib.addIncludeDir("${path}");`;
      } else if (q[1] === "l") {
        return `lib.linkSystemLibrary("${path}");`;
      }
      if (q === "-pthread") return undefined;
      if (q === "-Wl,--export-dynamic") return undefined;
      throw new Error("unknown " + q);
    })
    .filter(q => q)
    .map((q, i) => (i === 0 ? q : "    " + q))
    .join("\n");

  let template = await fs.readFile(
    path.join(__dirname, "template_build.zig"),
    "utf-8"
  );

  await fs.writeFile(
    path.join(__dirname, "build.zig"),
    "// Autogenerated by genbuild.js, do not modify.\n" +
      template.replace(`@compileError("genbuild.js");`, res),
    "utf-8"
  );
})();
